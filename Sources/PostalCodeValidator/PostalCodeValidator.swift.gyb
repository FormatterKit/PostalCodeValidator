% warning = "This file was automatically generated and should not be edited."
// ${warning}
import Foundation

%{
# encoding=utf8
import os
import sys
import json
reload(sys)
sys.setdefaultencoding('utf8')
}%
% with open(os.getcwd() + "/../../Resources/postalData.json") as file:
    %{ data = json.load(file) }%
/// A validator for postal codes.
public final class PostalCodeValidator {
    /**
     * A set of available region codes.
     *
     * Each element of the returned set is an two-letter
     * ISO 3166-2 region code
     * (for example, "US" for the United States of America).
    */
    public class var isoRegionCodes: Set<String> {
        return Set(patternsByRegion.keys)
    }

    private static let patternsByRegion: [String: String] = [
    % for region in data:
        % if region:
            %{
               try:
                  code = region['key']
                  pattern = region['zip']
               except KeyError:
                  pass }%
        "${code}": #"${pattern}"#,
        % end
    % end
% end
    ]

    /**
     *  The two-letter ISO 3166-2 region code
     *  (for example, "US" for the United States of America).
     */
    var regionCode: String

    private var regularExpression: NSRegularExpression

    /**
     * Creates a postal code validator for the specified region.
     *
     * Returns `nil` if the region isn't supported.
     *
     * - Parameters:
     *   - region: A two-letter ISO 3166-2 region code
     *             (for example, "US" for the United States of America).
     */
    public init?(regionCode: String) {
        guard let pattern = PostalCodeValidator.patternsByRegion[regionCode],
            let regex = try? NSRegularExpression(pattern: #"\A\#(pattern)\Z"#, options: [])
        else { return nil }

        self.regionCode = regionCode
        self.regularExpression = regex
    }

    /**
     * Creates a postal code validator for the region of the specified locale.
     *
     * Returns `nil` if the locale doesn't have a valid region,
     * or the region isn't supported.
     *
     * - Parameters:
     *   - locale: The locale whose `regionCode` property is used to determine
     *             the appropriate postal code validation rules.
     */
    public convenience init?(locale: Locale) {
        guard let regionCode = locale.regionCode else { return nil }

        self.init(regionCode: regionCode)
    }

    /**
     * Returns whether a postal code is valid for the configured region.
     *
     * - Parameters:
     *   - postalCode: The postal code.
     * - Returns: `true` if valid, otherwise `false`.
     */
    public func validate(postalCode: String) -> Bool {
        return regularExpression.rangeOfFirstMatch(in: postalCode, options: [], range: NSRange(postalCode.startIndex..<postalCode.endIndex, in: postalCode)).location != NSNotFound
    }
}
